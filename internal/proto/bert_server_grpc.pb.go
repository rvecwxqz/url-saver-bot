// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: internal/proto/bert_server.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BertClassifierClient is the client API for BertClassifier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BertClassifierClient interface {
	Predict(ctx context.Context, in *PredictRequest, opts ...grpc.CallOption) (*PredictResponse, error)
}

type bertClassifierClient struct {
	cc grpc.ClientConnInterface
}

func NewBertClassifierClient(cc grpc.ClientConnInterface) BertClassifierClient {
	return &bertClassifierClient{cc}
}

func (c *bertClassifierClient) Predict(ctx context.Context, in *PredictRequest, opts ...grpc.CallOption) (*PredictResponse, error) {
	out := new(PredictResponse)
	err := c.cc.Invoke(ctx, "/main.BertClassifier/Predict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BertClassifierServer is the server API for BertClassifier service.
// All implementations must embed UnimplementedBertClassifierServer
// for forward compatibility
type BertClassifierServer interface {
	Predict(context.Context, *PredictRequest) (*PredictResponse, error)
	mustEmbedUnimplementedBertClassifierServer()
}

// UnimplementedBertClassifierServer must be embedded to have forward compatible implementations.
type UnimplementedBertClassifierServer struct {
}

func (UnimplementedBertClassifierServer) Predict(context.Context, *PredictRequest) (*PredictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Predict not implemented")
}
func (UnimplementedBertClassifierServer) mustEmbedUnimplementedBertClassifierServer() {}

// UnsafeBertClassifierServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BertClassifierServer will
// result in compilation errors.
type UnsafeBertClassifierServer interface {
	mustEmbedUnimplementedBertClassifierServer()
}

func RegisterBertClassifierServer(s grpc.ServiceRegistrar, srv BertClassifierServer) {
	s.RegisterService(&BertClassifier_ServiceDesc, srv)
}

func _BertClassifier_Predict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PredictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BertClassifierServer).Predict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.BertClassifier/Predict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BertClassifierServer).Predict(ctx, req.(*PredictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BertClassifier_ServiceDesc is the grpc.ServiceDesc for BertClassifier service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BertClassifier_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.BertClassifier",
	HandlerType: (*BertClassifierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Predict",
			Handler:    _BertClassifier_Predict_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/bert_server.proto",
}
